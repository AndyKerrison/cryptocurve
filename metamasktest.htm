<html>
<head>
</head>
<body>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="web3.min.js"></script>
<script runat="server" type"text/javascript">

var ethBalance = 0;
var metaMaskAddress;
var contractAddress;

window.addEventListener('load', function() {
	checkWeb3();
});

function checkWeb3()
{
	// Checking if Web3 has been injected by the browser (Mist/MetaMask)
	if (typeof web3 !== 'undefined') {
		// Use Mist/MetaMask's provider
		window.web3 = new Web3(web3.currentProvider);
		checkNetworkVersion();
		//window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
		//alert("found metamask");
	} else {
		alert("This page requires MetaMask");
		//alert("loading default");    
		// fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)
		//window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
	}
}

function checkNetworkVersion()
{
	web3.version.getNetwork((err, netId) => {
		switch (netId) {
			case "1":
				console.log('This is mainnet')
				loadStuff();
				break
			case "2":
				console.log('This is the deprecated Morden test network.')
				break
			case "3":
				console.log('This is the ropsten test network.')
				break
			default:
				console.log('This is an unknown network.')
		}
	});
}

function loadStuff()
{
	if (web3.eth.accounts.length == 0)
	{
		alert("Please unlock metamask and refresh page to continue");
		return;
	}
	metaMaskAddress = web3.eth.accounts[0];
	$('#ethAddress').html(metaMaskAddress);
	
	contractAddress = "0x1909Bd7256095f1A013617D5078e20344Bb8dC0D";
	var contractAbi = [
  {
    "constant": false,
    "inputs": [],
    "name": "setPurchaseFailed",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_totalAddresses",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "token",
        "type": "address"
      }
    ],
    "name": "setTokenAddress",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "resetMe",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_totalEthUnspent",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "maxEth",
        "type": "uint256"
      }
    ],
    "name": "setMaxEth",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_maxGwei",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "maxGwei",
        "type": "uint256"
      }
    ],
    "name": "setMaxGwei",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "saleStartTime",
        "type": "uint256"
      }
    ],
    "name": "setSaleStartTime",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_saleStartTime",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_totalEthContributed",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_maxEth",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_tokensReceived",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_owner",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "name": "_etherDeposits",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_depositsLocked",
    "outputs": [
      {
        "name": "",
        "type": "bool"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "buyTokens",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "_addressArray",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_totalTokenBalance",
    "outputs": [
      {
        "name": "",
        "type": "uint256"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_token",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [],
    "name": "_sale",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "payable": false,
    "stateMutability": "view",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "emergencySelfDestruct",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "sale",
        "type": "address"
      }
    ],
    "name": "setSaleAddress",
    "outputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "payable": false,
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "payable": true,
    "stateMutability": "payable",
    "type": "fallback"
  }
]
	
	var contractInstance = web3.eth.contract(contractAbi).at(contractAddress);
	
	contractInstance._etherDeposits(metaMaskAddress, function(error, result)
	{
		if (!error) {
			console.log(result);
			//alert("got some value " + result);
			result = +(result/1000000000000000000).toFixed(4)
			$('#etherDeposited').html(result);
		} else {
			console.error(error);
		}
	});
		
	/*
	alert("now setting value");
	
	contractInstance = web3.eth.contract(abi).at(address);
	contractInstance.setSomeValue(100, {value: 0, gas: 30000}, function(error, result){ 
		if (!error) {
			console.log(result);
		} else {
			console.error(error);
		}
	});
	*/
 
	// Now you can start your app & access web3 freely:
	web3.eth.getBalance(metaMaskAddress, function (error, result) {
		if (!error) {
			console.log(result);
			var ether = web3.fromWei(result, 'ether');
			console.log(ether);
			ether = +ether.toFixed(4);
			ethBalance = ether;
			$('#ethBalance').html(ether);			
		} else {
			console.error(error);
		}
	});
	
	web3.eth.getBalance(contractAddress, function (error, result) {
		if (!error) {
			console.log(result);
			var ether = web3.fromWei(result, 'ether');
			console.log(ether);
			//alert("got contract eth balance " + result);
		} else {
			console.error(error);
		}
	});
}

$( document ).ready(function() {
	bindButtons();    
});

function bindButtons() {
	$('#btnDeposit').click(function() {
		var value = $('#txtDeposit').val();
		if (isNaN(value)) 
		{
			alert("Numbers only, bitch");
		}
		else if (value > ethBalance)
		{
			alert("insufficient funds");
		}
		else if (value < 0.01)
		{
			alert("Minimum deposit is 0.01");
		}
		else
		{
			//alert("ok, submitting");
			submitDeposit(value);
		}
	});
	
	$('#btnWithdraw').click(function() {
		withdraw();		
	});
}

//DISABLE WHEN CONTRACT ACTIVE!
function withdraw()
{
	web3.eth.sendTransaction({
		from: metaMaskAddress,
		to: contractAddress,
		value: 0
	}, function(error, result){
		if (!error) {
			console.log(result);
			alert("Transaction hash: " + result);			
		} else {
			console.error(error);
		}
	});			
}

function submitDeposit(value)
{
	alert("(debug) from: " + metaMaskAddress);
	alert("(debug) to: " + contractAddress);
	alert("(debug) value: " + value);
	web3.eth.sendTransaction({
		from: metaMaskAddress,
		to: contractAddress,
		value: value*1000000000000000000 //must be a unit for this somewhere
	}, function(error, result){
		if (!error) {
			console.log(result);
			alert("Transaction hash: " + result);			
			$("#txtDeposit").html("0.0");
		} else {
			console.error(error);
		}		
	});
}

</script>

<div>Ethereum address:</div>
<div id="ethAddress">[someaddress]</div>
<div>Ether balance:</div>
<div id="ethBalance">[somevalue]</div>

<h2>Metamask Blockchain interaction demo</h2>
<p>Hard coded ico list (temporary)</p>
<table>
<thead>
	<tr>
		<th>ICO</th>
		<th>Date</th>
		<th>Deposited</th>
		<th>Deposit</th>
		<th>Withdraw</th>
	</tr>
</thead>
<tbody>
	<tr>
		<td>SomeICONameHere</td>
		<td>dd/mm/yyyy</td>
		<td id="etherDeposited"></td>
		<td>
			<input type="text" id="txtDeposit" value="0.0">
			<button id="btnDeposit">Deposit</button>
		</td>
		<td>
			<button id="btnWithdraw">Withdraw all</button>
		</td>
	</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Stuff done</p>
<ul>
	<li>Read address and balance from Metamask</li>
	<li>Safe errors if metamask not installed, or not unlocked</li>
	<li>Deposit to smart contract plus basic validation (numeric, min/max limits)</li>
	<li>Allow withdraw from smart contract</li>
</ul>

<p>Still todo:</p>
<ul>
	<li>get ICO list from database</li>
	<li>Restrict the withdraw/deposit functions based on if ICO is enabled, active, etc</li>
	<li>clean up javascript code, split into useful modules</li>
	<li>Add user's pending transactions to database and display on this page</li>
	<li>Auto-update at intervals (30s? 1m?)</li>
	<li>Admin page for adding/updatingdeleting ICO's in the database</li>
</ul>

</body>
</html>